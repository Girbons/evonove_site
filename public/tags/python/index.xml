<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Python on  </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/tags/python/index.xml/</link>
    
    
    
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>Django admin e permessi</title>
      <link>http://localhost:1313/blog/2011/django-admin-e-permessi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2011/django-admin-e-permessi/</guid>
      <description>&lt;p&gt;.. raw:: html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;Capita che a volte framework come &amp;lt;strong&amp;gt;Django&amp;lt;/strong&amp;gt; e tool come il suo &#39;&amp;lt;em&amp;gt;admin site&#39;&amp;lt;/em&amp;gt;, ci vengano in mente come scelte per sviluppare velocemente dei CRUD. Tuttavia ci accorgiamo altrettanto velocemente che questo potente strumento propone delle soluzioni che non sempre si sposano con la nostra logica di business. E&#39; questo il caso dei permessi. L&#39;amministrazione di Django non ha il permesso &#39;&amp;lt;em&amp;gt;view&amp;lt;/em&amp;gt;&#39;, o meglio: se un oggetto di buisiness &amp;amp;egrave; visibile da un utente dell&#39;admin site, questo ha anche la possbilit&amp;amp;agrave; di modificarlo.&amp;amp;nbsp;Nelle seguenti verr&amp;amp;agrave; introdotta una possibile soluzione per creare e utilizzare il permesso &amp;lt;em&amp;gt;view&amp;lt;/em&amp;gt; all&#39;interno dell&#39;amministrazione di Django, semplificando cos&amp;amp;igrave; la gestione di tutti quegli oggetti su cui la sicurezza del nostro CRUD identifica un gruppo di utenze con il solo diritto di lettura.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;La soluzione suggerita ruota intorno alla classe Django che ha nome di &amp;lt;strong&amp;gt;Backend.&amp;lt;/strong&amp;gt; Questa, nelle ultime versioni di Django (v. 1.2), ha subito delle modifiche, dando allo sviluppatore la possibilit&amp;amp;agrave; di subentrare, meno intrusivamente ma pi&amp;amp;ugrave; efficacemente, nel flusso della sicurezza del framework: tanto da poter manipolare i permessi e renderli applicabili esclusivamente a determinati oggetti. Per dettagliare al meglio quali classi create e quali template personalizzare, si rimanda al wiki aziendale &amp;lt;strong&amp;gt;&amp;lt;a title=&amp;quot;wiki.evonove.it&amp;quot; href=&amp;quot;http://wiki.evonove.it&amp;quot;&amp;gt;wiki.evonove.it&amp;lt;/a&amp;gt;&amp;lt;/strong&amp;gt; nella sessione Django sotto la voce&amp;amp;nbsp;&amp;lt;a title=&amp;quot;CustomizeAdminSite&amp;quot; href=&amp;quot;http://wiki.evonove.it/Django/CustomizeAdminSite&amp;quot;&amp;gt;CustomizeAdminSite&amp;lt;/a&amp;gt;&amp;amp;nbsp;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Buona lettura, e se voleste perfezionare o sconvolgere o commentare l&#39;algoritmo proposto siete i ben venuti; sicuro non vi mancano gli strumenti&amp;amp;nbsp;per farlo&amp;amp;nbsp;(wiki, blog, email, ...) .&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Progetto Kimol - Diario di Bordo - 1</title>
      <link>http://localhost:1313/blog/2011/progetto-kimol-diario-di-bordo-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2011/progetto-kimol-diario-di-bordo-1/</guid>
      <description>&lt;p&gt;Si è conclusa la prima settimana di lavoro su KiMol, il progetto sviluppato da
uno studente dell&amp;rsquo;Università degli Studi di Perugia nell&amp;rsquo;ambito di un
&lt;a href=&#34;/it/workshop/&#34;&gt;tirocinio esterno&lt;/a&gt; presso Evonove.&lt;/p&gt;

&lt;p&gt;Riassumo brevemente per chi non abbia letto la
&lt;code&gt;pagina del progetto nel wiki &amp;lt;http://wiki.evonove.it/Concepts/KiMol&amp;gt;&lt;/code&gt;&lt;em&gt;: si
tratta dello sviluppo di un&amp;rsquo;interfaccia utente gesture based per
&lt;code&gt;PyMol &amp;lt;http://www.pymol.org/&amp;gt;&lt;/code&gt;&lt;/em&gt;, un noto visualizzatore open source di
strutture molecolari.&lt;/p&gt;

&lt;p&gt;.. image:: /img/2011/foto-1.jpg
    :alt: Kinect e Xtion sulla scrivania
    :align: center
    :class: bordered-img&lt;/p&gt;

&lt;p&gt;Abbiamo approfittato del recente ingresso in commercio della periferica
&lt;code&gt;Xtion &amp;lt;http://www.asus.com/Multimedia/Motion_Sensor/Xtion_PRO/&amp;gt;&lt;/code&gt;_ da parte di
Asus per affiancarla al Kinect di Microsoft come dispositivo di acquisizione
(nella foto); l&amp;rsquo;idea è poter utilizzare indifferentemente l&amp;rsquo;una o l&amp;rsquo;altra
periferica anche se al momento lo sviluppo è guidato dal Kinect.&lt;/p&gt;

&lt;p&gt;Chi ha avuto esperienza con l&amp;rsquo;hacking del Kinect saprà che sono diverse le
soluzioni a disposizione degli sviluppatori per interfacciarsi al dispositivo,
recuperarne i dati ed elaborarli in modo da realizzare funzionalità di gesture
tracking. Per il momento noi ci siamo affidati al progetto
&lt;code&gt;OpenKinect &amp;lt;http://openkinect.org/wiki/Main_Page&amp;gt;&lt;/code&gt;_ per la parte acquisizione
e ad &lt;code&gt;OpenCV &amp;lt;http://opencv.willowgarage.com/wiki/Welcome&amp;gt;&lt;/code&gt;_ per quella di
elaborazione; i risultati sono incoraggianti e gran parte del merito va ai
bindings Python per la libreria freenect che ci permettono una prototipazione
rapida molto utile soprattutto in questa fase esplorativa delle potenzialità
della periferica.&lt;/p&gt;

&lt;p&gt;Mettere in piedi tutta la toolchain è stato abbastanza semplice e facilmente
replicabile grazie alla configurazione di freenect, molto ben organizzata
attraverso &lt;code&gt;CMake &amp;lt;http://www.cmake.org/&amp;gt;&lt;/code&gt;_ ed alla semplicità con cui reperire
le dipendenze sulla distribuzione Fedora 15 con la quale è equipaggiata la
macchina di riferimento per lo sviluppo del progetto.&lt;/p&gt;

&lt;p&gt;Il prossimo step consiste nel comprendere al meglio i dati che vengono forniti
dal Kinect attraverso freenect e sondare le potenzialità di OpenCV rispetto al
progetto finale.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://localhost:1313/blog/2011/hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2011/hello-world/</guid>
      <description>&lt;p&gt;.. raw:: html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Inauguriamo il blog di Evonove con quella che è forse la più nota (per non dire l&#39;unica) locuzione informatica conosciuta al di fuori del nostro mondo, quello della programmazione software:
&amp;lt;pre&amp;gt;print &#39;hello, world!&#39;&amp;lt;/pre&amp;gt;
E tanto per chiarire quale sarà il tenore tecnico del blog, giusto due parole su quello che sta dietro a queste pagine.

Il progetto è nato insieme alla stessa Evonove ma ha impiegato diverso tempo per venire alla luce. Complice il rincorrersi delle novità che riguardano il nostro lavoro, quella che doveva essere un&#39;unica pagina contenente il minimo indispensabile per consentire ai nostri clienti (attuali e potenziali) di raggiungerci attraverso il Web si è trasformata in una specie di parco giochi per il nostro staff.

Prima l&#39;adozione di un CMS (perché sarebbe stato carino provarlo), poi di un engine per il blog (perché sarebbe stato carino integrarlo), poi una bella iniezione di Javascript (perché sarebbe stato carino aumentare l&#39;interattività). Poi abbiamo smesso di giustificarci ed abbiamo semplicemente continuato a fare quello che ci piace.

Il risultato:
&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;Engine CMS basato su django-cms&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Engine Blog basato su django-zinnia&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Custom homepage basata su jQuery e django-cms&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Rendering delle icone via Raphaël Javascript Library&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Tanto bel codice Python per il deployment&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
Nella speranza che i contenuti del blog piacciano, vi invitiamo ad abbonarvi ai nostri feed, riportarci qualche bug e magari far circolare un po&#39; la voce.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>libFreenect su Fedora</title>
      <link>http://localhost:1313/blog/2011/libfreenect-su-fedora/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2011/libfreenect-su-fedora/</guid>
      <description>

&lt;p&gt;OpenKinect è una community di appassionati dediti in particolare all&amp;rsquo;utilizzo di
Microsoft Kinect in ambiente desktop attraverso strumenti open source.
In particolare OpenKinect è responsabile dello sviluppo della libreria Freenect
grazie alla quale è possibile accedere a molti dei dati che arrivano dal Kinect
quando connesso ad un PC attraverso una porta USB. Freenect è una libreria
multipiattaforma (Mac, Linux, Win) dotata di bindings Python; sebbene OpenKinect
non ne fornisca pacchetti o distribuzioni binarie, compilare ed installare la
libreria è abbastanza semplice, soprattutto in una distribuzione Fedora 15 con
l&amp;rsquo;aiuto di Yum.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Prerequisiti&lt;/h2&gt;

&lt;p&gt;Prima di procedere con la build della libreria abbiamo bisogno di installare
alcuni strumenti e dipendenze, cosa che facciamo con yum:&lt;/p&gt;

&lt;p&gt;.. sourcecode:: terminal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install git cmake gcc gcc-c++ libXi libXi-devel libXmu libXmu-devel freeglut freeglut-devel libusb1-devel Cython
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fatto.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;libFreenect&lt;/h2&gt;

&lt;p&gt;Possiamo recuperare facilmente una versione aggiornata dei sorgenti della
libreria da GitHub:&lt;/p&gt;

&lt;p&gt;.. sourcecode:: terminal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git://github.com/OpenKinect/libfreenect.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creiamo poi una directory che conterrà i files della build senza &amp;ldquo;sporcare&amp;rdquo; la
directory dei sorgenti, ci spostiamo al suo interno e da lì invochiamo cmake:&lt;/p&gt;

&lt;p&gt;.. sourcecode:: terminal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir libfreenect_build &amp;amp;&amp;amp; cd libfreenect_build/
ccmake ../libfreenect
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dall&amp;rsquo;interfaccia di CMake è importante abilitare il flag per la build dei
bindings Python:&lt;/p&gt;

&lt;p&gt;.. sourcecode:: terminal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BUILD_PYTHON: ON
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A questo punto non resta che procedere con l&amp;rsquo;invocazione di make per la build e
l&amp;rsquo;installazione (quest&amp;rsquo;ultima dovrà essere effettuata con i privilegi di root
nel caso non abbiate impostato la variabile INSTALL_PREFIX con un path su cui
avete i permessi di scrittura).&lt;/p&gt;

&lt;p&gt;.. sourcecode:: terminal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finito. Se la build è stata completata con successo potete verificare la
corretta installazione direttamente con l&amp;rsquo;interprete Python. Se dalla shell il
comando:&lt;/p&gt;

&lt;p&gt;.. sourcecode:: terminal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python -c &amp;quot;import freenect&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;finisce senza produrre errori, libFreenect è correttamente installata nel
vostro sistema.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Django &#43; Wordpress = EvoBlog</title>
      <link>http://localhost:1313/blog/2011/django-wordpress-evoblog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2011/django-wordpress-evoblog/</guid>
      <description>&lt;p&gt;Ho appena terminato lo switch dell&amp;rsquo;engine che sta dietro al nostro blog:
da django-blog-zinnia siamo passati a Wordpress, prodotto che nell&amp;rsquo;ultimo anno
abbiamo avuto modo di vedere in dettaglio durante lo sviluppo di integrazioni
per alcuni clienti.&lt;/p&gt;

&lt;p&gt;Zinnia è un ottimo prodotto e sicuramente la migliore app Django che sono
riuscito a trovare che implementi un blog, prendete ad esempio il codice che
serve ad utilizzare &lt;code&gt;Shorty &amp;lt;http://evo9.it&amp;gt;&lt;/code&gt;_ come shortener per gli articoli
(a meno del caching che vi risparmio):&lt;/p&gt;

&lt;p&gt;.. sourcecode:: python&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def backend(entry):
    url = &#39;%s%s&#39; % (Site.objects.get_current().domain,
                        urllib2.quote(entry.get_absolute_url()))
    try:
        f = urllib2.urlopen(&amp;quot;http://www.evo9.it/api/short/%s&amp;quot; % url,
            data=&#39;&#39;)
    except Exception as e:
        return &#39;&#39;
    return json.loads(f.read())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;E&amp;rsquo; stato altrettanto semplice integrare i contenuti del blog nella homepage del
sito, realizzata con un&amp;rsquo;applicazione Django custom.  Tutto questo però non
riesce a bilanciare le difficoltà di gestione (ad esempio) delle immagini, degli
aggiornamenti, dei contenuti evoluti che a volte vorremmo mettere negli articoli
(codice sorgente formattato). Le motivazioni dello switch sono quindi da
ricercarsi esclusivamente nella facilità con cui Wordpress ci permette di
inserire e modificare gli articoli ed il suo altissimo livello di
SEO-friendlyness.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;integrazione con Django è stata realizzata utilizzando i feed RSS messi a
disposizione da Wordpress, che in questo contesto eccelle. Si tratta di
aggiungere qualcosa del genere alle viste esistenti:&lt;/p&gt;

&lt;p&gt;.. sourcecode:: python&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rss_url = &#39;http://www.evonove.it/blog/%s/category/front-page/feed/&#39;
    % context[&#39;lang&#39;]
feed = feedparser.parse(rss_url)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I feed vengono recuperati e parsati dalla libreria feedparser: ho barattato
una serie di query al database di backend con una HTTP/GET fatta in localhost,
non ho ancora fatto i benchmark ma ad occhio non mi pare di aver perso nulla in
termini di velocità di elaborazione della pagina.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>incontro di Febbraio</title>
      <link>http://localhost:1313/blog/2011/pypg-incontro-di-febbraio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2011/pypg-incontro-di-febbraio/</guid>
      <description>&lt;p&gt;Il codice servito da supporto alla chiaccherata sull&#39;utilizzo avanzato di PyQt &amp;egrave; disponibile su github &lt;a title=&#34;github&#34; href=&#34;https://github.com/masci/pypg_advancedqt&#34; target=&#34;_blank&#34;&gt;qui&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shorty is online</title>
      <link>http://localhost:1313/blog/2011/shorty-e-online/shorty-e-online/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2011/shorty-e-online/shorty-e-online/</guid>
      <description>&lt;p&gt;&lt;code&gt;Shorty &amp;lt;http://evo9.it&amp;gt;&lt;/code&gt;&lt;em&gt;, a project developed by a student from the University
of Perugia during his internship here at Evonove is finally online.
It&amp;rsquo;s basically an URL shortner with some enhancing features released with a
BSD license. For more details, get it on
&lt;code&gt;bitbucket &amp;lt;http://forge.evonove.it/shorty/overview&amp;gt;&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shorty è online</title>
      <link>http://localhost:1313/blog/2011/shorty-e-online/shorty-e-online/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2011/shorty-e-online/shorty-e-online/</guid>
      <description>&lt;p&gt;&lt;code&gt;Shorty &amp;lt;http://evo9.it&amp;gt;&lt;/code&gt;&lt;em&gt;, il progetto sviluppato durante l&amp;rsquo;internship di uno
studente dell&amp;rsquo;Università degli Studi di Perugia qui in Evonove, è finalmente
online. Si tratta di un URL shortner che tenta di superare alcune problematiche
legate agli shortner in generale. Il progetto è rilasciato con licenza
opensource BSD, il codice lo trovate su &lt;code&gt;bitbucket &amp;lt;http://forge.evonove.it/shorty/overview&amp;gt;&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Django &#43; Jetty &#43; SPDY = blazing fast!!!</title>
      <link>http://localhost:1313/blog/2012/django-jetty-spdy-blazing-fast/django-jetty-spdy-blazing-fast/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2012/django-jetty-spdy-blazing-fast/django-jetty-spdy-blazing-fast/</guid>
      <description>

&lt;p&gt;During November, 2009 a new open network protocol named SPDY was defined with a
first draft; the main goal of this new protocol was reducing the latency during
web pages loading. The achievement of the technical specifications must comply
with certain requirements: minimize deployment complexity; avoid the need of any
changes to content by website developers so that the only changes required to
support SPDY are in the client user agent or in the web server application.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Who supports SPDY&lt;/h2&gt;

&lt;p&gt;Recently IETF HTTP-bis working group has announced that the first draft of
HTTP 2.0 is based on SPDY protocol drafts. During the evolution of SPDY many of
most famous web servers implement, as experimental feature, this new protocol.
Just to name a few, we are talking about Jetty, Apache (via mod_spdy), node.js
and nginx.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Why Python web framework cannot support SPDY natively?&lt;/h2&gt;

&lt;p&gt;PEP-333 defines WSGI specification as a standard interface between the web
server side and the application / framework side for Python web development.
WSGI doesn’t support SPDY natively so the protocol cannot be used with Python
web frameworks like Django.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Django and Jython: prepare for Jetty&lt;/h2&gt;

&lt;p&gt;While waiting for an evolution of the current WSGI implementation, it is still
possibile to set up some technologies in order to serve a Django application
with Jetty as web container in order to take advantage of Jetty SPDY and SPDY
push support. To achieve this goal it’s necessary to use Jython, a Java
implementation of Python language. Steps below define how to configure a Django
instance inside Jetty with SPDY push feature enabled.&lt;/p&gt;

&lt;p&gt;Download and install the stable version of Jython (currently 2.5.3).
Even if it’s possible to create and develop the Django application using a
traditional Python virtualenv, you need to create a new virtualenv with Jython
interpreter during deployment phase.&lt;/p&gt;

&lt;p&gt;The use of Django ORM is a common problem that need to be solved in order to
run Django inside Jython. This is caused by database backends that depend on
libraries written in C language.
To overcome this it’s necessary to install django-jython module so it is
possible to use some useful tool together with all zxJDBC backends.
Unfortunately the currently released version of module (1.3.0) doesn’t have a
working support for Django 1.4. However it’s possibile to use the latest
available version in the official repository
(actually use changeset e2c6ff29cd01) that include some bug fixes and a good
Django support.&lt;/p&gt;

&lt;p&gt;To enable django-jython module it’s necessary to edit database backends and
Django INSTALLED_APPS:&lt;/p&gt;

&lt;p&gt;.. sourcecode:: python&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DATABASES = {
    &#39;default&#39;: {
    &#39;ENGINE&#39;: &#39;doj.backends.zxjdbc.postgresql&#39;,
    [...]
    }
}

INSTALLED_APPS = (
    [...]
    &#39;doj&#39;,
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will enable some extra features like the capability to create a war package
directly from manage.py within Jython, the Django framework, the desired JDBC
driver (an include java lib parameter should be used) and the developed
application.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Deploy Django on Jetty&lt;/h2&gt;

&lt;p&gt;Jetty version 8.1.8.v20121106 stable was used in this setup. Without any
further configuration it is possible to deploy the war package as usual to have
Django up and running.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Django, Jetty and SPDY&lt;/h2&gt;

&lt;p&gt;To serve a web page with SPDY protocol it’s necessary to add ‘spdy’ in OPTIONS
parameter inside start.ini file. Then jetty-spdy.xml configuration file should
be used. As defined by SPDY protocol if SPDY over HTTPS (TLS) is used, the Next
Procol Negotiation (NPN) library is required. The JVM should be started with
non-standard option:&lt;/p&gt;

&lt;p&gt;.. sourcecode:: terminal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java -Xbootclasspath/p:&amp;lt;path_to_npn_boot_jar&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Version of library in use is npn-boot-8.1.2.v20120308.jar. At this point Jetty
can serve your application with SPDY support.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Django, Jetty, SPDY. Time to PUSH!&lt;/h2&gt;

&lt;p&gt;Thanks to Jetty and its SPDY implementation it is possible to use server push
to reduce the number of client requests.
To enable transparent push feature a pushStrategy should be activated inside
Jetty configuration file. To improve the behaviour of a push strategy two
variables must be set:&lt;/p&gt;

&lt;p&gt;.. sourcecode:: xml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Set name=&amp;quot;referrerPushPeriod&amp;quot;&amp;gt;15000&amp;lt;/Set&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;define a delay after which Jetty will stop to load in push mode associated
resources of a main request;&lt;/p&gt;

&lt;p&gt;.. sourcecode:: xml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Set name=&amp;quot;maxAssociatedResources&amp;quot;&amp;gt;32&amp;lt;/Set&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;define the maximum associated resources of a main request that can be pushed.
Over this cap the remaining resources are sent using SPDY without push.
After this configuration Django will be served using SPDY-PUSH feature.&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;To sum up!&lt;/h2&gt;

&lt;p&gt;Even if this view is optimized to emphasize SPDY potentiality, below we list
the average load time of this Django page served by Jetty:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTP (1.1): &lt;strong&gt;7,63 seconds&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;SPDY/3: &lt;strong&gt;1,71 seconds&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;SPDY/3 (with push): &lt;strong&gt;1,55 seconds&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Collected values refer to a preliminary test run locally with a 200ms round
trip delay and it isn&amp;rsquo;t a benchmark of real use cases.&lt;/p&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;Source code&lt;/h2&gt;

&lt;p&gt;Project code, war package and Jetty configuration: &lt;a href=&#34;https://bitbucket.org/evonove/django-spdy/&#34;&gt;https://bitbucket.org/evonove/django-spdy/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;References&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://webtide.intalio.com/&#34;&gt;http://webtide.intalio.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.eclipse.org/Jetty&#34;&gt;http://wiki.eclipse.org/Jetty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://chromium.org/spdy&#34;&gt;http://chromium.org/spdy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://djangoproject.org&#34;&gt;http://djangoproject.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://packages.python.org/django-jython/&#34;&gt;http://packages.python.org/django-jython/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/mod-spdy/&#34;&gt;http://code.google.com/p/mod-spdy/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Build Python desktop application with Jenkins</title>
      <link>http://localhost:1313/blog/2013/build-python-desktop-application-with-jenkins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2013/build-python-desktop-application-with-jenkins/</guid>
      <description>&lt;p&gt;We recently started using &lt;code&gt;Jenkins &amp;lt;http://jenkins-ci.org/&amp;gt;&lt;/code&gt;_, a well known system for Continuous Integration,
and make it perform tasks like build and package multiplatform desktop
applications.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re currently in charge of developing a desktop application written in &lt;strong&gt;Python&lt;/strong&gt; using the &lt;strong&gt;Qt framework&lt;/strong&gt;.
Though small, the application is quite complex and has a lot of dependencies which is quite easy to satisfy on a local
environment (provided that you&amp;rsquo;re not on Windows, but that&amp;rsquo;s another story).&lt;/p&gt;

&lt;p&gt;There are several proprietary &lt;strong&gt;C/C++&lt;/strong&gt; libraries involved, and some of them are under active development, so we have to
stay up to date with them and with the relative Python bindings. At an early stage of the development the environment
was entirely hand crafted, so building and packaging the software with the right configuration was up to the single
developer who wrote the first draft of the project.&lt;/p&gt;

&lt;p&gt;The prototype was ok, so we started a refactoring of the codebase and assigned other resources to the project. Problems
with the building environment arose almost instantly: not every developer works on the same configuration (and this is
a choice) and maintaining different build scripts was not acceptable.&lt;/p&gt;

&lt;p&gt;We needed a build system and we needed it fast, so we started reviewing all of these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gnu Make&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Fabric &amp;lt;http://docs.fabfile.org/en/latest/&amp;gt;&lt;/code&gt;_&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Paver &amp;lt;http://paver.github.io/paver/&amp;gt;&lt;/code&gt;_&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buildout &amp;lt;http://www.buildout.org/en/latest/&amp;gt;&lt;/code&gt;_&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMake &amp;lt;http://www.cmake.org/&amp;gt;&lt;/code&gt;_&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CMake seems the most flexible of the above (at least for a newcomer) and it was the only one which let us collect the code
from several sources &lt;strong&gt;(CVS repos, git repos, source tarballs)&lt;/strong&gt; build it with different build systems &lt;strong&gt;(Make, QMake, distutils,
custom scripts)&lt;/strong&gt;, make the executable with PyInstaller and create the archive to distribute. First issue solved:
developers can now build the software with minimum effort and in a well defined and versioned environment&lt;/p&gt;

&lt;p&gt;Now the real issue, beta tester started asking for packages for their own distributions/OSs - we needed a build
system capable to run our CMake script on several machines, produce the software package and make it available for download
somewhere on the internet.&lt;/p&gt;

&lt;p&gt;Our requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a turnkey solution&lt;/li&gt;
&lt;li&gt;should be able to start and stop virtual machines inside our LAN&lt;/li&gt;
&lt;li&gt;should be able to start and stop EC2 machines&lt;/li&gt;
&lt;li&gt;can speak with cloud storaging systems (e.g. S3)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We briefly reviewed two products, Jenkins and &lt;code&gt;CDash &amp;lt;http://www.cdash.org/&amp;gt;&lt;/code&gt;_, and we ended up with &lt;strong&gt;Jenkins&lt;/strong&gt;
basically for two reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;documentation&lt;/li&gt;
&lt;li&gt;huge amount of very useful plugins&lt;/li&gt;
&lt;li&gt;easy installation and maintaining&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the moment we have a master/slave installation on Jenkins running on a physical machine and several slave nodes with
different Linux distributions (both physical and virtual) where the git repository containing the CMake builder is cloned,
run, and the final product is actually produced. Jenkins can remotely control &lt;strong&gt;KVM&lt;/strong&gt; virtual machines, starting and stopping
them depending on its needs. Artifacts produced by the builders (i.e. the tarballs containing the software package ready
to be shipped) are collected and uploaded to a &lt;strong&gt;S3 bucket&lt;/strong&gt;, where authorized beta testers can download them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feel free to drop here a comment&lt;/strong&gt; and share your experience, it&amp;rsquo;s never easy finding a best practice when the requirements
are complex and not always well defined as they are in this case.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Django OAuth Toolkit is out!</title>
      <link>http://localhost:1313/blog/2013/django-oauth-toolkit-is-out/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2013/django-oauth-toolkit-is-out/</guid>
      <description>

&lt;p&gt;We just released the &lt;code&gt;latest version &amp;lt;https://pypi.python.org/pypi/django-oauth-toolkit/0.3.0&amp;gt;&lt;/code&gt;_ of Django OAuth Toolkit,
a library to add OAuth goodies to Django projects. The project is under active development, at the moment it offers
fully-featured and RFC6749 compliant OAuth2 providers implementation and it runs on Django 1.4, 1.5 and 1.6a1 with
Python 2.7 and 3.3.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;A brief history&lt;/h1&gt;

&lt;p&gt;Everything started when we found ourselves in the need to implement an OAuth2 provider for a Django web service.
We happily use Django REST framework wherever we have to expose an API, and that was right the case. Django REST framework
has built-in support for a third party Django app implementing OAuth providers but we shortly faced some issues and
started to search for an alternative.&lt;/p&gt;

&lt;p&gt;Digging around we stumbled upon this blog post from Daniel Greenfeld:
&lt;code&gt;The sorry state of Python OAuth providers &amp;lt;http://pydanny.com/the-sorry-state-of-python-oauth-providers.html&amp;gt;&lt;/code&gt;_. Enough
is enough but we were still not sure whether starting another project from scratch or not, when we met Daniel at the Django
Circus in Warsaw. We talked shortly about the topic but he was very convincing and we started coding as soon as we came
back at work.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Why?&lt;/h1&gt;

&lt;p&gt;We&amp;rsquo;re trying to involve other people in the project and usually this is the first question we&amp;rsquo;re asked: why another
project? Instead of complaining about other projects, we usually list what we got so far and possibly other don&amp;rsquo;t have:
features and goodies we strongly needed and now actually have.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;DRY&lt;/h2&gt;

&lt;p&gt;We think &lt;code&gt;oauthlib &amp;lt;https://github.com/idan/oauthlib&amp;gt;&lt;/code&gt;_ is currently the state of the art OAuth library in the Python
world. We choose to rely on a well documented, well supported and active project instead of write one on our own, with
all the FUD of the case.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Documentation&lt;/h2&gt;

&lt;p&gt;OAuth protocol can be quite mind boggling every here and there. We think writing good docs is mandatory when the code
may be quite simple but the workflow heavily complicated. We are also putting a lot of efforts on writing tutorials, as
one line of code worths thousand words (expecially with OAuth workflows :-).&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Testing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m not referring to Unit testing here (still we do our best to keep coverage over 95% ;-) but to some stuff users
can actually use to test their applications on a real OAuth2 workflow. In some circumstances, OAuth2 applications need
a companion to exchange tokens, provide authorizations and so on. We deployed an OAuth2 playground on Heroku to let
users perform a roundtrip between their local apps and a real server (or client, depending on the case).&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Timezone aware&lt;/h2&gt;

&lt;p&gt;We strongly believe that if your dates and times are not timezone aware, they&amp;rsquo;re broken. That said.&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Python 3&lt;/h2&gt;

&lt;p&gt;On the neverending effort of porting our codebase to Python 3, we cannot rely anymore on libraries and tools which do
not have at least any roadmap for the porting. Django OAuth Toolkit is alredy working with both Python 2.7 and 3.3.&lt;/p&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;Support&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re working hard on the project also because we&amp;rsquo;re using it internally in our company, so we can guarantee our full
support on the middle term and hopefully longer, depending on the success it could be have in the Django world.&lt;/p&gt;

&lt;h1 id=&#34;toc_8&#34;&gt;We want you!&lt;/h1&gt;

&lt;p&gt;As any other Open Source project, we&amp;rsquo;re nothing without a community: any help is appreciated, code of course but also
docs, testing and any kind of feedback. &lt;code&gt;Fork the project &amp;lt;https://github.com/evonove/django-oauth-toolkit&amp;gt;&lt;/code&gt;_,
take a ride, fill some PRs!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DjangoCon Europe 2013 Wrap-up</title>
      <link>http://localhost:1313/blog/2013/djangocon-europe-2013-wrap-up/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2013/djangocon-europe-2013-wrap-up/</guid>
      <description>&lt;p&gt;Seriously, a circus? That perfectly fits the quote &lt;em&gt;And now for something completely different&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Just got back from the latest DjangoCon Europe - I usually write a sort of log of the conferences I attend, this time
it&amp;rsquo;ll be just a matter of thanks.&lt;/p&gt;

&lt;p&gt;.. image:: /img/2013/circus.jpg
    :alt: The Circus!
    :align: center
    :class: bordered-img&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks to the organizers&lt;/strong&gt;, they possibly delivered the craziest tech conference I ever attended. Thanks for the &lt;strong&gt;food&lt;/strong&gt;,
I much appreciated the veg option (I arrived in Warsaw prepared to starve, likely I gained weight).&lt;/p&gt;

&lt;p&gt;.. image:: /img/2013/food.jpg
    :alt: Yummy!
    :align: center
    :class: bordered-img&lt;/p&gt;

&lt;p&gt;Thanks for the &lt;strong&gt;free and fresh beverages&lt;/strong&gt; constantly available for the attendees. Thanks for the &lt;strong&gt;free beer&lt;/strong&gt; (don&amp;rsquo;t now if and when it&amp;rsquo;ll
happen again&amp;hellip;). Thanks for the &lt;strong&gt;free ice creams&lt;/strong&gt;, again, constantly available during the conference. Thanks for the
&lt;strong&gt;goodies&lt;/strong&gt; (hammoks, blankets, cushions, deckchairs and so on&amp;hellip;). Thanks for bringing me to &lt;strong&gt;Warsaw&lt;/strong&gt;: nice people, nice
places, good food - it totally worths, even for a short weekend. Thanks to the &lt;strong&gt;speakers&lt;/strong&gt;, some of them were very
inspiring and the amount of lighting talk was ridicolously huge! Thanks to &lt;code&gt;Emanuele &amp;lt;/authors/palazzem&amp;gt;&lt;/code&gt;_ who arranged
a very fun (and informative!) lighting talk in a few hours.&lt;/p&gt;

&lt;p&gt;.. image:: /img/2013/lighting.jpg
    :alt: Emanuele on stage
    :align: center
    :class: bordered-img&lt;/p&gt;

&lt;p&gt;And thanks to the &lt;strong&gt;weather&lt;/strong&gt;, really don&amp;rsquo;t know what could
have been happened in case of rain :-).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Django &#43; Jetty &#43; SPDY = blazing fast!</title>
      <link>http://localhost:1313/blog/2012/django-jetty-spdy-blazing-fast/django-jetty-spdy-blazing-fast/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2012/django-jetty-spdy-blazing-fast/django-jetty-spdy-blazing-fast/</guid>
      <description>

&lt;p&gt;Nel novembre del 2009 fu redatto il primo draft di un nuovo protocollo di
networking aperto chiamato SPDY il cui obiettivo primario era quello di ridurre
la latenza di caricamento delle pagine web. Il raggiungimento delle specifiche
tecniche stabilite doveva rispettare alcuni requisiti fondamentali: minimizzare
la complessità di distribuzione del protocollo; evitare cambiamenti da parte
degli sviluppatori delle pagine web affinché le modifiche dovessero essere fatte
solo al client web ed al web server.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Chi supporta SPDY?&lt;/h2&gt;

&lt;p&gt;Durante l’evoluzione del protocollo, che attualmente è stato preso come base
per la redazione del primo draft dell’HTTP 2.0 ad opera del gruppo di lavoro
IETF HTTP-bis, molti dei più noti web server si sono adattati in via
sperimentale a questa nuova implementazione. Per citarne alcuni parliamo di
Jetty, Apache (tramite mod_spdy), node.js e nginx.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Perché Python non può sfruttare SPDY?&lt;/h2&gt;

&lt;p&gt;Per quanto riguarda il linguaggio Python ed il suo uso per sviluppare
applicazioni web, la specifica PEP-333 stabilì l’utilizzo di WSGI come
interfaccia standard tra il lato web server ed il lato applicazione / framework.
WSGI non supporta attualmente SPDY pertanto il protocollo non può essere
utilizzato nativamente con framework web quali Django.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Django e Jython: prepararsi per Jetty&lt;/h2&gt;

&lt;p&gt;In attesa di un’evoluzione dell’attuale implementazione di WSGI è possibile
integrare alcune tecnologie in modo da distribuire un’applicazione Django
all’interno del web container Jetty. L’utilità di questo approccio è quello di
sfruttare il supporto di Jetty a SPDY ed alla sua funzione push. Per raggiungere
l’obiettivo è necessario utilizzare Jython ovvero un’implementazione del
linguaggio Python scritto in Java. Di seguito si elencano i passaggi da seguire
per configurare un’istanza Django all’interno di Jetty con abilitata la funzione
SPDY push.&lt;/p&gt;

&lt;p&gt;Scaricare ed installare la versione stable di Jython (attualmente 2.5.3).
Nonostante sia possibile creare e sviluppare l’applicazione Django direttamente
in un virtualenv Python, durante la fase di deploy sarà necessario creare un
nuovo virtualenv con Jython come interprete.&lt;/p&gt;

&lt;p&gt;Uno dei problemi da risolvere per eseguire Django su Jython è il suo ORM in
quanto i backends che si collegano al database dipendono da librerie scritte
in C. Per ovviare a questo è necessario installare l’estensione django-jython in
modo da poter usufruire di una serie di tool e di tutti i backends zxJDBC per i
database principali. Purtroppo l’attuale versione rilasciata (1.3.0) non ha un
corretto supporto per Django 1.4. Tuttavia è possibile utilizzare l’ultima
versione disponibile nel repository ufficiale
(attualmente è il changeset e2c6ff29cd01) che include una serie di fix per il
corretto funzionamento.&lt;/p&gt;

&lt;p&gt;Dopo aver installato l’estensione è necessario abilitarla tra i database
backends e le INSTALLED_APPS di Django:&lt;/p&gt;

&lt;p&gt;.. sourcecode:: python&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DATABASES = {
    &#39;default&#39;: {
    &#39;ENGINE&#39;: &#39;doj.backends.zxjdbc.postgresql&#39;,
    [...]
    }
}

INSTALLED_APPS = (
    [...]
    &#39;doj&#39;,
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Questo abiliterà la possibilità di poter generare direttamente il package war
con al suo interno Jython, Django, il driver JDBC scelto (bisogna specificare
l’inclusione) e l’applicazione sviluppata.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Deploy di Django su Jetty&lt;/h2&gt;

&lt;p&gt;La versione di Jetty utilizzata è la versione 8.1.8.v20121106 stable.
Senza nessuna configurazione aggiuntiva è possibile fare il deploy del package
war per poi richiedere a Jetty di servire l’applicazione.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Django, Jetty e SPDY&lt;/h2&gt;

&lt;p&gt;Per servire una pagina con il protocollo SPDY è necessario aggiungere spdy tra
le OPTIONS nel file start.ini. A quel punto aggiungere jetty-spdy.xml tra i file
di configurazione da utilizzare. Come da specifica, qualora venga utilizzato
SPDY su HTTPS (TLS), è richiesta l’attivazione dell’estensione TLS Next
Protocol Negotiation (NPN). La JVM che eseguirà Jetty dovrà essere avviata
utilizzando l’opzione non standard:&lt;/p&gt;

&lt;p&gt;.. sourcecode:: terminal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java -Xbootclasspath/p:&amp;lt;path_to_npn_boot_jar&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La versione utilizzata della libreria è la npn-boot-8.1.2.v20120308.jar.
A questo punto sarà possibile farsi servire la pagina con il protocollo SPDY.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Django, Jetty, SPDY e poi PUSH!&lt;/h2&gt;

&lt;p&gt;Sfruttando l’implementazione SPDY di Jetty è possibile usufruire della
modalità server push così da ridurre notevolmente il numero di richieste fatte
dal client per il recupero delle risorse. Per attivare in modo trasparente
questa funzionalità è opportuno abilitare una pushStrategy nel file di
configurazione di Jetty. Per migliorare il comportamento della push strategy,
è possibile configurare due variabili nel file di configurazione:&lt;/p&gt;

&lt;p&gt;.. sourcecode:: xml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Set name=&amp;quot;referrerPushPeriod&amp;quot;&amp;gt;15000&amp;lt;/Set&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;definisce il tempo scaduto il quale Jetty smetterà di caricare in modalità push
risorse associate alla risorsa principale richiesta;&lt;/p&gt;

&lt;p&gt;.. sourcecode:: xml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Set name=&amp;quot;maxAssociatedResources&amp;quot;&amp;gt;32&amp;lt;/Set&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;definisce il numero massimo di risorse da associare alla risorsa principale.
Oltre questo numero le risorse saranno inviate secondo il protocollo SPDY senza push.
Abilitata questa configurazione Django sarà servito in modalità SPDY-PUSH.&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Tirando le somme&lt;/h2&gt;

&lt;p&gt;Nonostante la vista sia stata costruita proprio per mettere in risalto le
potenzialità di SPDY, di seguito elenchiamo i tempi di caricamento medi della
pagina Django servita da Jetty:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTP (1.1): &lt;strong&gt;7,63 secondi&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;SPDY/3: &lt;strong&gt;1,71 secondi&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;SPDY/3 (with push): &lt;strong&gt;1,55 secondi&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I valori raccolti interessano dei test preliminari eseguiti in locale con un
roundtrip delay di 200ms e non sono dei benchmark su dei casi d&amp;rsquo;uso
reale.&lt;/p&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;Codice sorgente&lt;/h2&gt;

&lt;p&gt;Progetto, package war e configurazione Jetty: &lt;a href=&#34;https://bitbucket.org/evonove/django-spdy/&#34;&gt;https://bitbucket.org/evonove/django-spdy/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Riferimenti&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://webtide.intalio.com/&#34;&gt;http://webtide.intalio.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.eclipse.org/Jetty&#34;&gt;http://wiki.eclipse.org/Jetty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://chromium.org/spdy&#34;&gt;http://chromium.org/spdy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://djangoproject.org&#34;&gt;http://djangoproject.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://packages.python.org/django-jython/&#34;&gt;http://packages.python.org/django-jython/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/mod-spdy/&#34;&gt;http://code.google.com/p/mod-spdy/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Europython 2013 Wrap-up</title>
      <link>http://localhost:1313/blog/2013/europython-2013/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2013/europython-2013/</guid>
      <description>

&lt;p&gt;Right back from the EuroPython conference, the last in Florence before moving to Berlin for the next two years.
It was a pretty long week, a lot of talks, people, dinners, cocktails, beers, barbecues, sprints&amp;hellip; I just want to
thank the organizers, the wifi guys, the cable guy, the personnel from the hotel, all the nice people I met and
the speakers, in particular those from evonove, who made a great job on contributing with a regular talk, a training
and a lightning talk. We also managed to make a code sprint for
&lt;code&gt;Django OAuth Toolkit &amp;lt;http://github.com/evonove/django-oauth-toolkit&amp;gt;&lt;/code&gt;_ on Saturday, right after the goodbye party
(kudos for us :-)&lt;/p&gt;

&lt;p&gt;Here are the recordings of the talks provided by &lt;code&gt;Emanuele &amp;lt;/authors/palazzem&amp;gt;&lt;/code&gt;_ and &lt;code&gt;Federico &amp;lt;/authors/synasius&amp;gt;&lt;/code&gt;_:&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Speed up your Django apps with Jython and SPDY&lt;/h1&gt;

&lt;p&gt;.. youtube:: DD1zLltB1RQ
   :align: center&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;An intro to Blender modeling and scripting&lt;/h1&gt;

&lt;p&gt;.. youtube:: 4e6z3Ada00I
   :align: center&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.. youtube:: U1K19GoLMuk
   :align: center&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;An intro to Blender modeling and scripting - Reprise&lt;/h1&gt;

&lt;p&gt;.. youtube:: 96WoCShO3i0
   :align: center&lt;/p&gt;

&lt;p&gt;And the lightning talks:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://youtu.be/iUNbgNuN0qY?t=1h9m32s&#34;&gt;http://youtu.be/iUNbgNuN0qY?t=1h9m32s&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DjangoCon Europe 2013 Wrap-up</title>
      <link>http://localhost:1313/blog/2013/djangocon-europe-2013-wrap-up/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2013/djangocon-europe-2013-wrap-up/</guid>
      <description>&lt;p&gt;Seriously, a circus? That perfectly fits the quote &lt;em&gt;And now for something completely different&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Just got back from the latest DjangoCon Europe - I usually write a sort of log of the conferences I attend, this time
it&amp;rsquo;ll be just a matter of thanks.&lt;/p&gt;

&lt;p&gt;.. image:: /img/2013/circus.jpg
    :alt: The Circus!
    :align: center
    :class: bordered-img&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks to the organizers&lt;/strong&gt;, they possibly delivered the craziest tech conference I ever attended. Thanks for the &lt;strong&gt;food&lt;/strong&gt;,
I much appreciated the veg option (I arrived in Warsaw prepared to starve, likely I gained weight).&lt;/p&gt;

&lt;p&gt;.. image:: /img/2013/food.jpg
    :alt: Yummy!
    :align: center
    :class: bordered-img&lt;/p&gt;

&lt;p&gt;Thanks for the &lt;strong&gt;free and fresh beverages&lt;/strong&gt; constantly available for the attendees. Thanks for the &lt;strong&gt;free beer&lt;/strong&gt; (don&amp;rsquo;t now if and when it&amp;rsquo;ll
happen again&amp;hellip;). Thanks for the &lt;strong&gt;free ice creams&lt;/strong&gt;, again, constantly available during the conference. Thanks for the
&lt;strong&gt;goodies&lt;/strong&gt; (hammoks, blankets, cushions, deckchairs and so on&amp;hellip;). Thanks for bringing me to &lt;strong&gt;Warsaw&lt;/strong&gt;: nice people, nice
places, good food - it totally worths, even for a short weekend. Thanks to the &lt;strong&gt;speakers&lt;/strong&gt;, some of them were very
inspiring and the amount of lighting talk was ridicolously huge! Thanks to &lt;code&gt;Emanuele &amp;lt;/authors/palazzem&amp;gt;&lt;/code&gt;_ who arranged
a very fun (and informative!) lighting talk in a few hours.&lt;/p&gt;

&lt;p&gt;.. image:: /img/2013/lighting.jpg
    :alt: Emanuele on stage
    :align: center
    :class: bordered-img&lt;/p&gt;

&lt;p&gt;And thanks to the &lt;strong&gt;weather&lt;/strong&gt;, really don&amp;rsquo;t know what could
have been happened in case of rain :-).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>